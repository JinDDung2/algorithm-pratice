탐색이란? 많은 양의 데이터 중에서 원하는 값을 찾는 과정
대표적인 그래프 탐색 알고리즘은 DFS와 BFS가 있음
자주 등장하는 유형

스택 : 먼저 들어온 데이터가 나중에 나가는 것(선입후출) --> 박스쌓기
=> 입구와 출구가 같음
큐 : 먼저 들어온 데이터터가 먼저 나가는 것 (선입선출) -->
=> 입구와 출구가 모두 뚫려있는 터널과 같은 형태

재귀함수 : 나 자신의 함수를 사용하는 것
유의사항
1. 재귀함수를 잘 활용하면 복잡한 알고리즘이 간결해짐
2. 모든 재귀함수는 반복문을 이용하여 동일하게 작동하게 할 수 있음
3. 재귀함수가 반복문보다 좋을 때도 있지만, 아닐 때도 있음
4. 컴퓨터가 함수를 재귀적으로 호출하면 컴퓨터 메모리 내부 스택 프레임에 쌓임

DFS(깊이우선탐색)
-깊은 부분을 우선적으로 탐색
-스택 자료구조(재귀함수)를 이용함 동작하는 세 가지 과정은
1. 탐색 시작 노드를 스택에 삽입하고 방문처리함
2. 스택의 최상단 노드에 방문하지 않은 인접한 노드가 하나라도 있으면 그 노드를 스택에 넣고 방문처리함. 방문하지 않는 인접한 노드가 있다면
최상단 노드를 꺼내옴
3. 2번 과정을 더 이상 반복할 수 없으면 탈출

DFS 특징
1. 현 경로상의 노드를 기억하기에 적은 메모리 사용
2. 해가 없는 경로를 탐색할 경우 단계가 끝날 때 까지 반복함.(이때는 임의로 지정한 깊이까지만 탐색하도록 설정)
3. DFS로 얻어진 해가 최단 경로라는 보장이 없음. DFS는 해에 도착하면 탐색을 종료하기 때문

BFS(너비우서탐색) --> 특정 조건에서 최단경로
-그래프에서 가까운 노드부터 우선적으로 탐색
-큐 자로구조를 사용하며, 동작하는 세 가지 과정은
1. 탐색 시작 노드를 큐에 삽입하고 방문처리함
2. 큐에서 노드를 꺼낸 뒤에 해당 노드의 인접 노드 중에서 방문하지 않은 노드를 모두 큐에 삽입하고 방문처리함
3. 2번 과정을 더 이상 반복할 수 없으면 탈출

BFS 특징
1. 경로가 매우 길면 많은 메모리 공간 사용해서 기억해야함
2. 해가 존재하지 않는다면 유한 그래프의 경우 탐색 실패를 도출함
3. 무한 그래프의 경우 해를 찾지도 못하지만 탐색을 끝내지도 못함

1) 그래프의 모든 정점을 방문하는 것이 주요한 문제
단순히 모든 정점을 방문하는 것이라면 DFS, BFS 두 가지 방법 중 어느 것을 사용하셔도 상관없음

2) 경로의 특징을 저장해둬야 하는 문제 ***
예를 들면, 각 정점에 숫자가 적혀있고 a부터 b까지 가는 경로를 구하는데 경로에 같은 숫자가 있으면 안 된다는 문제 등,
각각의 경로마다 특징을 저장해둬야 할 때는 DFS를 사용 (BFS는 경로의 특징을 가지지 못하기 때문)

3) 최단거리 구해야 하는 문제
미로 찾기 등 최단거리를 구해야 할 때, BFS가 유리함
왜냐하면, 깊이우선탐색은 최악의 경우 완전탐색이 됨
너비 우선 탐색은 현재 노드에서 가장 근접한 곳부터 찾기 때문에 경로를 탐색 시 먼저 찾아지는 해답이 곧 최단거리기 됨

이밖에도 
- 검색 대상 그래프가 절대적으로 크다면 DFS로 접근함
- 검색대상의 규모가 크지 않고, 검색 시작 지점으로부터 원하는 대상이 별로 멀지 않다면 BFS
